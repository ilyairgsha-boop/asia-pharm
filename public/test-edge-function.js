/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Edge Function
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)
 * 2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤–µ—Å—å —ç—Ç–æ—Ç —Ñ–∞–π–ª
 * 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: await testEdgeFunction()
 */

async function testEdgeFunction() {
  const projectId = 'boybkoyidxwrgsayifrd';
  const anonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJveWJrb3lpZHh3cmdzYXlpZnJkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE4NDI3ODEsImV4cCI6MjA3NzQxODc4MX0.1R7AMGegpzlJL45AaeT2BJHQi4-Oswe1tMcAYXK8e2Y';
  const baseUrl = `https://${projectId}.supabase.co/functions/v1/make-server-a75b5353`;
  
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Edge Function...');
  console.log('üìç URL:', baseUrl);
  console.log('');

  // Test 1: Health check
  console.log('--- Test 1: Health Check ---');
  try {
    const response = await fetch(baseUrl, {
      headers: {
        'Authorization': `Bearer ${anonKey}`,
        'apikey': anonKey,
        'Content-Type': 'application/json',
      }
    });
    
    console.log('Status:', response.status, response.statusText);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –£—Å–ø–µ—Ö!');
      console.log('–í–µ—Ä—Å–∏—è API:', data.version);
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:', data.routes);
      console.log('–û–∫—Ä—É–∂–µ–Ω–∏–µ:', data.env);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞:', response.status);
      const text = await response.text();
      console.error('–û—Ç–≤–µ—Ç:', text);
    }
  } catch (error) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:', error.message);
  }
  console.log('');

  // Test 2: Database connection
  console.log('--- Test 2: Database Connection ---');
  try {
    const response = await fetch(`${baseUrl}/test/db`, {
      headers: {
        'Authorization': `Bearer ${anonKey}`,
        'apikey': anonKey,
        'Content-Type': 'application/json',
      }
    });
    
    console.log('Status:', response.status, response.statusText);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞!');
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:', data.productCount);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞:', response.status);
      const text = await response.text();
      console.error('–û—Ç–≤–µ—Ç:', text);
    }
  } catch (error) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:', error.message);
  }
  console.log('');

  // Test 3: Public endpoint (categories - should work without auth)
  console.log('--- Test 3: Public Endpoint (Categories) ---');
  try {
    const response = await fetch(`${baseUrl}/categories`, {
      headers: {
        'Authorization': `Bearer ${anonKey}`,
        'apikey': anonKey,
        'Content-Type': 'application/json',
      }
    });
    
    console.log('Status:', response.status, response.statusText);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', data?.length || 'N/A');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞:', response.status);
      const text = await response.text();
      console.error('–û—Ç–≤–µ—Ç:', text);
    }
  } catch (error) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:', error.message);
  }
  console.log('');

  console.log('üéØ –ò–¢–û–ì–û:');
  console.log('–ï—Å–ª–∏ –≤—Å–µ 3 —Ç–µ—Å—Ç–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ - Edge Function —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  console.log('–ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ - —Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∞–π–ª URGENT_FIX_REQUIRED.md');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.testEdgeFunction = testEdgeFunction;

console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!');
console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: await testEdgeFunction()');
