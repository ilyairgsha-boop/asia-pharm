import { createContext, useContext, useState, ReactNode, useCallback, useMemo, useEffect } from 'react';
import { Language, translations } from '../utils/i18n';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider = ({ children }: { children: ReactNode }) => {
  const [language, setLanguage] = useState<Language>('ru');

  const handleSetLanguage = useCallback((lang: Language) => {
    console.log(`üåê Language changed to: ${lang}`);
    setLanguage(lang);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è t –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞
  const t = useCallback((key: string): string => {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
    const translation = translations[language]?.[key as keyof typeof translations.ru];
    
    // –î–µ–±–∞–≥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ª–∞–¥–∫–∏)
    if (!translation) {
      console.warn(`üîç Translation missing for key "${key}" in language "${language}"`);
    }
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á
    return translation || key;
  }, [language]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç language - —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞
  useEffect(() => {
    console.log(`‚úÖ Language context updated to: ${language}`);
  }, [language]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –æ–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const value = useMemo(() => ({
    language,
    setLanguage: handleSetLanguage,
    t
  }), [language, handleSetLanguage, t]);

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within LanguageProvider');
  }
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å currentLanguage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
  return {
    ...context,
    currentLanguage: context.language
  };
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø Language –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export type { Language };
